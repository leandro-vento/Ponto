golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
RSQLite::dbSendQuery(con, paste0("DROP TABLE Ponto"))
RSQLite::dbSendQuery(conn = con,
"CREATE TABLE Ponto (
Login text,
Data data_type,
Entrada data_type,
Saida data_type,
SaldoHora data_type,
SaldoNumero real,
Referencia data_type,
Status text
)")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
RSQLite::dbSendQuery(con, paste0("DROP TABLE Ponto"))
RSQLite::dbSendQuery(conn = con,
"CREATE TABLE Ponto (
Login text,
Data data_type,
Entrada data_type,
Saida data_type,
SaldoHora data_type,
SaldoNumero real,
Referencia data_type,
Status text
)")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
ListaPonto <- RSQLite::dbGetQuery(conn = con, "SELECT * FROM Ponto")
View(ListaPonto)
tempo_calculo = as.numeric(difftime(hms(ListaPonto$Saida[1]), hms(ListaPonto$Entrada[1])))
tempo_calculo = as.numeric(difftime(lubridate::hms(ListaPonto$Saida[1]), lubridate::hms(ListaPonto$Entrada[1])))
lubridate::hms(ListaPonto$Saida[1])
ListaPonto$Saida[1]
lubridate::hms(Sys.time())
lubridate::hms(Sys.time(), roll = TRUE)
inicio_calculo <- Sys.time()
fim_calculo <- Sys.time()
tempo_calculo = as.numeric(difftime(ymd_hms(fim_calculo), ymd_hms(inicio_calculo), units = c("secs")))
tempo_calculo = as.numeric(difftime(lubridate::ymd_hms(fim_calculo), lubridate::ymd_hms(inicio_calculo), units = c("secs")))
as.difftime(c("0:3:20", "11:23:15"))
as.difftime(c("12:00:00", "11:30:00"))
difftime(c("12:00:00", "11:30:00"))
difftime(as.difftime(c("12:00:00", "11:30:00")))
fim_calculo
lubridate::ymd_hms(fim_calculo)
lubridate::ymd_hms(fim_calculo, quiet = TRUE)
library(lubridate)
lubridate::ymd_hms(fim_calculo)
lubridate::hms(fim_calculo)
lubridate::hms(Sys.time(), roll = TRUE)
difftime(as.difftime(c("12:00:00", "11:30:00")))
as.difftime(c("12:00:00", "11:30:00"))
x <- as.difftime(c("12:00:00", "11:30:00"))
x
x[1]
x[2]
x <- as.difftime(c("3:20", "23:15", "2:"), format = "%H:%M")
x
x <- as.difftime(c("3:20", "23:15"), format = "%H:%M")
x
interval(start = inicio_calculo, end = fim_calculo)
fim_calculo
duration(interval(start = inicio_calculo, end = fim_calculo))
as.duration(interval(start = inicio_calculo, end = fim_calculo))
ymd(inicio_calculo)
inicio_calculo
hms(ListaPonto$Entrada[1])
ListaPonto$Entrada[1]
hms(as.Date(ListaPonto$Entrada[1]))
hms(as.difftime(ListaPonto$Entrada[1]))
hms(as_datetime(ListaPonto$Entrada[1]))
as_datetime(ListaPonto$Entrada[1])
lubridate::hms(Sys.time())
lubridate::hms(as.character(Sys.time()))
lubridate::hms(as.character(Sys.time()), roll = TRUE)
lubridate::hms(as.character(Sys.Date()), roll = TRUE)
Sys.Date()
lubridate::dmy(as.character(Sys.Date()), roll = TRUE)
lubridate::dmy(Sys.Date(), roll = TRUE)
lubridate::dmy(Sys.Date())
lubridate::dmy(Sys.time())
strftime(fim_calculo, format="%H:%M:%S")
hms(strftime(fim_calculo, format="%H:%M:%S"))
strftime(fim_calculo, format="%H:%M:%S")-strftime(inicio_calculo, format="%H:%M:%S")
difftime(fim_calculo, fim_calculo, units = "auto")
difftime(fim_calculo, inicio_calculo, units = "auto")
difftime(fim_calculo, inicio_calculo, units = c("hour"))
difftime(fim_calculo, inicio_calculo, units = c("auto"))
x <- difftime(fim_calculo, inicio_calculo, units = c("auto"))
x
hms(x)
x <- difftime(ListaPonto$Saida[1], ListaPonto$Entrada[1], units = c("auto"))
ListaPonto$Saida[1]
format(ListaPonto$Saida[1],  format = "%H:%M:%S")
format(ListaPonto$Saida[1],  format = "%H%M%S")
format(ListaPonto$Saida[1],  format = "%H%M%S")
x < format(ListaPonto$Saida[1], format = "%H%M%S")
x <- format(ListaPonto$Saida[1], format = "%H%M%S")
y <- format(ListaPonto$Entrada[1], format = "%H%M%S")
difftime(x, y)
difftime(x, y, units = "auto")
difftime(as.Date(x), as.Date(y), units = "auto")
as.Date(y)
x <- format(ListaPonto$Saida[1], format = "%H:%M:%S")
y <- format(ListaPonto$Entrada[1], format = "%H:%M:%S")
difftime(as.Date(x), as.Date(y), units = "auto")
as.Date(x)
replace(ListaPonto$Saida[1], ":", "")
hms(replace(ListaPonto$Saida[1], c(":"), ""))
replace(ListaPonto$Saida[1], c(":"), c(""))
stringr::str_replace(ListaPonto$Saida[1], c(":"), c(""))
stringr::str_replace_all(ListaPonto$Saida[1], c(":"), c(""), )
stringr::str_replace_all(ListaPonto$Saida[1], c(":"), c(""))
hms(stringr::str_replace_all(ListaPonto$Saida[1], c(":"), c("")))
hms(stringr::str_replace_all(ListaPonto$Saida[1], c(":"), c("")))
stringr::str_replace_all(ListaPonto$Saida[1], c(":"), c(""))
hms(as.numeric(stringr::str_replace_all(ListaPonto$Saida[1], c(":"), c(""))))
as_date(Sys.Date())
x <- as_date(Sys.Date())
data_mdy <- dmy(x)
x <- as_date(Sys.Date())
data_mdy <- dmy(x)
data_string <- "21-10-2015"
data_as_date <- as_date(data_string)
dmy(21102015)
mdy(010210)
second(ListaPonto$Entrada[1])
ListaPonto$Entrada[1]
today()
today(tzone = "UTC")
now()
install.packages("lubridate")
remove.packages("lubridate", lib="~/R/win-library/4.0")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
caminho <- "C:\\Users\\leand\\OneDrive - FGV\\Ponto\\"
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = paste0(caminho, "ponto.sqlite"))
ListaPonto <- RSQLite::dbGetQuery(conn = con, "SELECT * FROM Ponto")
View(ListaPonto)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
ListaPonto
View(ListaPonto)
ListaPonto$SaldoHora <- lubridate::hms(ListaPonto$Saida, roll = TRUE) - lubridate::hms(ListaPonto$Entrada, roll = TRUE)
ListaPonto$Saida
lubridate::hms(ListaPonto$Saida, roll = TRUE)
detach("package:lubridate", unload = TRUE)
install.packages("lubridate", dependencies = TRUE)
install.packages("lubridate", dependencies = TRUE)
remove.packages("lubridate")
install.packages("lubridate", dependencies = TRUE)
install.packages("lubridate", dependencies = TRUE)
install.packages("lubridate", dependencies = TRUE)
ListaPonto$SaldoHora <- lubridate::hms(ListaPonto$Saida, roll = TRUE) - lubridate::hms(ListaPonto$Entrada, roll = TRUE)
View(ListaPonto)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
ListaPonto <- RSQLite::dbGetQuery(conn = con, "SELECT * FROM Ponto")
caminho <- "C:\\Users\\leand\\OneDrive - FGV\\Ponto\\"
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = paste0(caminho, "ponto.sqlite"))
ListaPonto <- RSQLite::dbGetQuery(conn = con, "SELECT * FROM Ponto")
View(ListaPonto)
ListaPonto$SaldoHora <- lubridate::hms(ListaPonto$Saida, roll = TRUE) - lubridate::hms(ListaPonto$Entrada, roll = TRUE)
ListaPonto$SaldoHora <- as.character(ListaPonto$SaldoHora)
ListaPonto$SaldoHora[1]+ListaPonto$SaldoHora[2]
ListaPonto$SaldoHora <- lubridate::hms(ListaPonto$Saida, roll = TRUE) - lubridate::hms(ListaPonto$Entrada, roll = TRUE)
ListaPonto$SaldoHora[1]+ListaPonto$SaldoHora[2]
ListaPonto <- ListaPonto %>% dplyr::group_by(Data) %>% dplyr::mutate(SaldoNumeroDia = sum(SaldoNumero))
View(ListaPonto)
ListaPonto <- ListaPonto %>% dplyr::group_by(Data) %>% dplyr::mutate(SaldoNumeroDia = sum(SaldoNumero),
SaldoHoraDia = sum(SaldoHora))
View(ListaPonto)
ListaPonto %>% dplyr::group_by(Data) %>% sum(SaldoHora)
ListaPonto %>% dplyr::group_by(Data) %>% sum(ListaPonto$SaldoHora)
ListaPonto %>% sum(ListaPonto$SaldoHora)
ListaPonto %>% sum(SaldoHora)
sum(ListaPonto$SaldoHora)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
profvis::profvis({# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()})
profvis::profvis({# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()})
profvis::profvis({ListaPonto$SaldoHora <- lubridate::hms(ListaPonto$Saida, roll = TRUE) - lubridate::hms(ListaPonto$Entrada, roll = TRUE)})

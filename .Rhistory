golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
ListaPonto
View(ListaPonto)
ListaPonto$SaldoHora <- lubridate::hms(ListaPonto$Saida, roll = TRUE) - lubridate::hms(ListaPonto$Entrada, roll = TRUE)
ListaPonto$Saida
lubridate::hms(ListaPonto$Saida, roll = TRUE)
detach("package:lubridate", unload = TRUE)
install.packages("lubridate", dependencies = TRUE)
install.packages("lubridate", dependencies = TRUE)
remove.packages("lubridate")
install.packages("lubridate", dependencies = TRUE)
install.packages("lubridate", dependencies = TRUE)
install.packages("lubridate", dependencies = TRUE)
ListaPonto$SaldoHora <- lubridate::hms(ListaPonto$Saida, roll = TRUE) - lubridate::hms(ListaPonto$Entrada, roll = TRUE)
View(ListaPonto)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
ListaPonto <- RSQLite::dbGetQuery(conn = con, "SELECT * FROM Ponto")
caminho <- "C:\\Users\\leand\\OneDrive - FGV\\Ponto\\"
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = paste0(caminho, "ponto.sqlite"))
ListaPonto <- RSQLite::dbGetQuery(conn = con, "SELECT * FROM Ponto")
View(ListaPonto)
ListaPonto$SaldoHora <- lubridate::hms(ListaPonto$Saida, roll = TRUE) - lubridate::hms(ListaPonto$Entrada, roll = TRUE)
ListaPonto$SaldoHora <- as.character(ListaPonto$SaldoHora)
ListaPonto$SaldoHora[1]+ListaPonto$SaldoHora[2]
ListaPonto$SaldoHora <- lubridate::hms(ListaPonto$Saida, roll = TRUE) - lubridate::hms(ListaPonto$Entrada, roll = TRUE)
ListaPonto$SaldoHora[1]+ListaPonto$SaldoHora[2]
ListaPonto <- ListaPonto %>% dplyr::group_by(Data) %>% dplyr::mutate(SaldoNumeroDia = sum(SaldoNumero))
View(ListaPonto)
ListaPonto <- ListaPonto %>% dplyr::group_by(Data) %>% dplyr::mutate(SaldoNumeroDia = sum(SaldoNumero),
SaldoHoraDia = sum(SaldoHora))
View(ListaPonto)
ListaPonto %>% dplyr::group_by(Data) %>% sum(SaldoHora)
ListaPonto %>% dplyr::group_by(Data) %>% sum(ListaPonto$SaldoHora)
ListaPonto %>% sum(ListaPonto$SaldoHora)
ListaPonto %>% sum(SaldoHora)
sum(ListaPonto$SaldoHora)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
profvis::profvis({# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()})
profvis::profvis({# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()})
profvis::profvis({ListaPonto$SaldoHora <- lubridate::hms(ListaPonto$Saida, roll = TRUE) - lubridate::hms(ListaPonto$Entrada, roll = TRUE)})
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
caminho <- "C:\\Users\\leand\\OneDrive - FGV\\Ponto\\"
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = paste0(caminho, "ponto.sqlite"))
ListaPonto <- RSQLite::dbGetQuery(conn = con, "SELECT * FROM Ponto")
View(ListaPonto)
tempo <- 155
tempo <- 155/3600
horas <- as.integer(tempo)
saldo1 <- tempo - horas
minutos <- as.integer(saldo1*60)
saldo2 <- saldo1 - (minutos/60)
segundos <- as.integer(saldo2*3600)
tempo <- 155/3600
horas <- as.numeric(as.integer(tempo))
saldo1 <- tempo - horas
minutos <- as.numeric(as.integer(saldo1*60))
saldo2 <- saldo1 - (minutos/60)
segundos <- as.numeric(as.integer(saldo2*3600))
tempo <- 155
tempo <- tempo/3600
horas <- as.numeric(as.integer(tempo))
saldo1 <- tempo - horas
minutos <- as.numeric(as.integer(saldo1*60))
saldo2 <- saldo1 - (minutos/60)
segundos <- as.numeric(as.integer(saldo2*3600))
convertido <- paste0(horas, ":", minutos, ":", segundos)
convertido <- paste0(if(nchar(horas)==1){0}, horas, ":", minutos, ":", segundos)
nchar(horas)
horas
tempo <- 155
tempo <- tempo/3600
horas <- as.numeric(as.integer(tempo))
saldo1 <- tempo - horas
minutos <- as.numeric(as.integer(saldo1*60))
saldo2 <- saldo1 - (minutos/60)
segundos <- as.numeric(as.integer(saldo2*3600))
convertido <- paste0(if(nchar(horas)==1){0}, horas, ":", minutos, ":", segundos)
convertido <- paste0(if(nchar(horas)==1){0}, horas, ":", if(nchar(minutos)==1){0}, minutos, ":", if(nchar(segundos)==1){0}, segundos)
converter_decimal_para_hora <- function(tempo){
horas <- as.numeric(as.integer(tempo))
saldo1 <- tempo - horas
minutos <- as.numeric(as.integer(saldo1*60))
saldo2 <- saldo1 - (minutos/60)
segundos <- as.numeric(as.integer(saldo2*3600))
convertido <- paste0(if(nchar(horas)==1){0}, horas, ":", if(nchar(minutos)==1){0}, minutos, ":", if(nchar(segundos)==1){0}, segundos)
}
converter_decimal_para_hora(8)
x <- converter_decimal_para_hora(8)
converter_decimal_para_hora <- function(tempo){
horas <- as.numeric(as.integer(tempo))
saldo1 <- tempo - horas
minutos <- as.numeric(as.integer(saldo1*60))
saldo2 <- saldo1 - (minutos/60)
segundos <- as.numeric(as.integer(saldo2*3600))
convertido <- paste0(if(nchar(horas)==1){0}, horas, ":", if(nchar(minutos)==1){0}, minutos, ":", if(nchar(segundos)==1){0}, segundos)
convertido
}
converter_decimal_para_hora(8)
x <- converter_decimal_para_hora(8)
converter_decimal_para_hora(8,5)
converter_decimal_para_hora(8.5)
converter_decimal_para_hora(8.75)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
SaldoNumero
SaldoNumero$SaldoNumero
SaldoHora <- converter_decimal_para_hora(SaldoNumero$SaldoNumero)
paste0("UPDATE Ponto SET SaldoHora = '", SaldoHora, "' WHERE Login='", usuario$usuario(), "' AND Data=DATE('now', 'localtime') AND SaldoHora = ''")
RSQLite::dbSendQuery(con, paste0("UPDATE Ponto SET SaldoHora = '", SaldoHora, "' WHERE Login='", usuario$usuario(), "' AND Data=DATE('now', 'localtime') AND SaldoHora = ''"))
ListaPonto <- RSQLite::dbGetQuery(conn = con, "SELECT * FROM Ponto")
caminho <- "C:\\Users\\leand\\OneDrive - FGV\\Ponto\\"
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = paste0(caminho, "ponto.sqlite"))
ListaPonto <- RSQLite::dbGetQuery(conn = con, "SELECT * FROM Ponto")
View(ListaPonto)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
RSQLite::dbSendQuery(con, paste0("DROP TABLE Ponto"))
RSQLite::dbSendQuery(conn = con,
"CREATE TABLE Ponto (
id integer primary key autoincrement,
Login text,
Data data_type,
Entrada data_type,
Saida data_type,
SaldoHora text,
SaldoNumero real,
Referencia data_type,
Status text
)")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
View(PontoFuncionario)
horas_dia <- sum(PontoFuncionario$SaldoNumero)
horas_dia <- converter_decimal_para_hora(horas_dia)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
caminho <- "C:\\Users\\leand\\OneDrive - FGV\\Ponto\\"
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = paste0(caminho, "ponto.sqlite"))
RSQLite::dbSendQuery(con, paste0("DROP TABLE Ponto"))
RSQLite::dbSendQuery(conn = con,
"CREATE TABLE Ponto (
id integer primary key autoincrement,
Login text,
Data data_type,
Entrada data_type,
Saida data_type,
SaldoHora text,
SaldoNumero real,
Referencia data_type,
Status text
)")
RSQLite::dbDisconnect(con)
RSQLite::dbDisconnect(con)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# You're now set! ----
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
## Run checks ----
## Check the package before sending to prod
devtools::check()
# ## Init Testing Infrastructure ----
# ## Create a template for tests
# golem::use_recommended_tests()
#
## Use Recommended Packages ----
golem::use_recommended_deps(recommended = c("shinydashboard", "shinydashboardPlus", "shinyjs",
"shinyWidgets", "formattable", "kableExtra", "DT",
"RSQLite", "DBI", "openxlsx", "rgdal", "sf",
"shinybusy"))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# ## Code coverage ----
# ## (You'll need GitHub there)
usethis::use_github()
## Vignette ----
usethis::use_vignette("Ponto")
devtools::build_vignettes()
golem::add_js_file( "script" )
golem::add_js_handler( "handlers" )
golem::add_css_file( "custom" )
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
remove.packages("CAGED", lib="~/R/win-library/4.0")
